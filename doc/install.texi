
@node INSTALLATION
@chapter INSTALLATION


The Cinelerra package contains Cinelerra and most of the libraries
needed to run it.  We try to include all the dependencies because of
the difficulty in tracking down the right versions.  Also included are
some utilities for handling files.  The following are the general
contents of all Cinelerra packages.

@itemize

@item

@b{Cinelerra executable} - cinelerra

@item

@b{Cinelerra plugins} - These all end in .plugin

@item

@b{doc} - The build copy of this documentation

@item

@b{fonts} - Font files for the titler

@item

@b{ffmpeg} - A version of ffmpeg for use with the command line encoding
feature.

@item

@b{mpeg3cat} - Utility for reading an MPEG file from a certain standard
and outputting it to stdout.

@item

@b{mpeg3toc, mpeg3cat, mpeg3dump, mpeg3peek} - Utilities for reading MPEG files.

@item

@b{previews} - Project files which are loaded as transition previews.

@end itemize



@menu
* INSTALLING A PRECOMPILED BINARY::
* COMPILING FROM SCRATCH::
* RUNNING CINELERRA::
@end menu








@node INSTALLING A PRECOMPILED BINARY
@section INSTALLING A PRECOMPILED BINARY

Cinelerra is easiest installed by downloading a precompiled binary and
running

@example
tar xvf cinelerra*.tar.xz
cd cinelerra*
./cinelerra.sh
@end example

It should have all the hardest dependencies already taken care of.

This doesn't always work because there are many versions of libc, each
incompatible with the others.  This is the biggest reason to compile
from scratch.







@node COMPILING FROM SCRATCH
@section COMPILING FROM SCRATCH

It should be noted that the compiler used in building Cinelerra
binaries is the free GNU compiler and very conservative optimization
flags.  Alternative optimization flags and compilers produce varying
results.  Compiling the source is hard and there's no warranty if the
source code fails to compile, but the method for compiling starts by
downloading the source code and decompressing.

The compilation is verified on a vanilla Ubuntu installation of a
certain version.  It has a lot of dependencies.  The README file
contains more info on the dependencies.

@example
tar xvf cinelerra*.tar.xz
@end example


Enter the main directory

@example
cd cinelerra*
@end example

Then run

@example
./configure
@end example

This checks the build environment for the right tools and should give
you an error if a tool is missing.  Once that succeeds run

@example
make
@end example

The make procedure should run through all the directories and put
binaries in the @b{i686} or @b{x86_64} directories.

A lot of libraries are included in thirdparty directories to get the
version numbers right.

Once finished, run

@example
make install
@end example

to install the binaries in the bin/ sub directory.  It doesn't install
anything in the system folders.


@node RUNNING CINELERRA
@section RUNNING CINELERRA


The simplest way to run Cinelerra is by going into bin/ & running


@example
./cinelerra.sh
@end example

This command hides a much more capable command line interface.  Run
@b{cinelerra -h} to get a listing of command line options.  The use of
these options is described in several sections.

For rendering from the command line @xref{RENDERING FILES}.


