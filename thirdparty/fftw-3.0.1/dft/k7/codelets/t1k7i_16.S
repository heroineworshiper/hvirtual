/*
 * Copyright (c) 2003 Matteo Frigo
 * Copyright (c) 2003 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

/* This file was automatically generated --- DO NOT EDIT */
/* Generated on Sat Jul  5 21:52:33 EDT 2003 */

#include "config.h"



/* cheap-mode: VECTGRADE_FULL succeeded. (192 steps) */
/* Generated by: /homee/stevenj/cvs/fftw3.0.1/genfft-k7/gen_twiddle -no-randomized-cse -n 16 -sign 1 -name t1k7i_16 */

/*
 * Generator Id's : 
 * $Id: algsimp.ml,v 1.3 2003/03/15 20:29:42 stevenj Exp $
 * $Id: fft.ml,v 1.3 2003/03/15 20:29:43 stevenj Exp $
 * $Id: gen_twiddle.ml,v 1.13 2003/04/18 01:21:45 athena Exp $
 */

/* The following asm code is Copyright (c) 2000-2001 Stefan Kral */
.section .rodata
	.balign 64
KP923879532KP382683432: .float +0.923879532511286756128183189396788286822416626, +0.382683432365089771728459984030398866761344562
KP382683432KP923879532: .float +0.382683432365089771728459984030398866761344562, +0.923879532511286756128183189396788286822416626
KP707106781KP707106781: .float +0.707106781186547524400844362104849039284835938, +0.707106781186547524400844362104849039284835938
.text
.text
	.balign 64
t1k7i_16:
	subl $148, %esp
	femms 
	movl %ebx, 144(%esp)
	movl 164(%esp), %edx
	movl 172(%esp), %ebx
	movl 156(%esp), %ecx
	movl %esi, 140(%esp)
	movl 160(%esp), %eax
	movl %edi, 136(%esp)
	movl 168(%esp), %esi
	movl %ebp, 132(%esp)
	leal (,%edx,4), %edx
	leal (,%ebx,4), %ebx
	.p2align 4,,7
.L0:
	/* promise simd cell size = 8 */ 
	movq (%ecx,%edx,8), %mm1
	movq 56(%eax), %mm0
	leal (%edx,%edx,2), %edi
	movq (%ecx), %mm6
	movq 112(%eax), %mm3
	leal (%edi,%edi,4), %ebp
	pswapd %mm1, %mm2
	pfmul %mm0, %mm1
	movq (%ecx,%ebp), %mm4
	leal (%edi,%edx,4), %ebp
	movq %mm6, %mm7
	pfmul %mm0, %mm2
	movq 48(%eax), %mm0
	pswapd %mm4, %mm5
	pfmul %mm3, %mm4
	pfpnacc %mm2, %mm1
	movq (%ecx,%ebp), %mm2
	pfmul %mm3, %mm5
	pfsub %mm1, %mm7
	pswapd %mm2, %mm3
	pfmul %mm0, %mm2
	pfadd %mm1, %mm6
	movq 16(%eax), %mm1
	pfmul %mm0, %mm3
	movq (%ecx,%edi), %mm0
	leal (%ebp,%edx,4), %edi
	leal (%edx,%edx,2), %ebp
	movq %mm7, 0(%esp)
	movq 80(%eax), %mm7
	pfnacc %mm2, %mm4
	movq %mm6, 48(%esp)
	movq (%ecx,%edi), %mm2
	pfacc %mm3, %mm5
	pswapd %mm0, %mm6
	leal (%edx,%edx,4), %edi
	pfmul %mm1, %mm0
	pfmul %mm1, %mm6
	pswapd %mm2, %mm3
	pfmul %mm7, %mm2
	movq %mm5, %mm1
	pfmul %mm7, %mm3
	movq %mm4, %mm7
	pfnacc %mm2, %mm0
	movq 24(%eax), %mm2
	pfacc %mm3, %mm6
	movq (%ecx,%edx,4), %mm3
	pfnacc %mm0, %mm5
	pfacc %mm0, %mm7
	pfnacc %mm6, %mm4
	pswapd %mm3, %mm0
	pfacc %mm6, %mm1
	pfmul %mm2, %mm3
	movq %mm5, %mm6
	pfmul %mm2, %mm0
	movq %mm7, 56(%esp)
	movq 88(%eax), %mm2
	pfpnacc %mm4, %mm5
	pfpnacc %mm6, %mm4
	movq (%ecx,%ebp,4), %mm6
	leal (%edi,%edx,2), %ebp
	pfnacc %mm1, %mm7
	movq %mm5, 16(%esp)
	pswapd %mm6, %mm5
	movq %mm4, 8(%esp)
	movq (%ecx,%edx,2), %mm4
	pfmul %mm2, %mm6
	movq %mm7, 24(%esp)
	movq 8(%eax), %mm7
	pfmul %mm2, %mm5
	pswapd %mm4, %mm2
	pfnacc %mm6, %mm3
	pfmul %mm7, %mm4
	pfacc %mm5, %mm0
	pfmul %mm7, %mm2
	movq (%ecx,%edi,2), %mm7
	movq 72(%eax), %mm5
	leal (%edx,%edx,2), %edi
	pswapd %mm0, %mm6
	pfnacc %mm3, %mm6
	pfacc %mm0, %mm3
	pswapd %mm7, %mm0
	pfmul %mm5, %mm7
	pfmul %mm5, %mm0
	movq %mm6, 32(%esp)
	movq %mm3, 40(%esp)
	movq 104(%eax), %mm6
	movq (%ecx,%ebp,2), %mm3
	leal (%edx,%edx,8), %ebp
	pfnacc %mm7, %mm4
	movq 40(%eax), %mm7
	pfacc %mm0, %mm2
	movq (%ecx,%edi,2), %mm0
	leal (%edx,%edx,4), %edi
	pswapd %mm3, %mm5
	pfmul %mm6, %mm3
	pfmul %mm6, %mm5
	pswapd %mm0, %mm6
	pfmul %mm7, %mm0
	pfmul %mm7, %mm6
	movq %mm4, %mm7
	pfnacc %mm2, %mm7
	pfnacc %mm0, %mm3
	pfacc %mm6, %mm5
	movq (%eax), %mm6
	movq %mm7, %mm0
	pfacc %mm3, %mm4
	pfnacc %mm5, %mm3
	pfacc %mm2, %mm5
	movq %mm4, 88(%esp)
	movq (%ecx,%edx), %mm2
	pfpnacc %mm3, %mm0
	pswapd %mm3, %mm3
	movq %mm5, 80(%esp)
	pswapd %mm2, %mm4
	movq 64(%eax), %mm5
	pfpnacc %mm7, %mm3
	movq (%ecx,%ebp), %mm7
	pfmul %mm6, %mm2
	pfmul %mm6, %mm4
	leal (%edi,%edx,8), %ebp
	movq %mm0, 72(%esp)
	movq 32(%eax), %mm0
	pswapd %mm7, %mm6
	pfmul %mm5, %mm7
	movq %mm3, 64(%esp)
	movq (%ecx,%edi), %mm3
	leal (%edx,%edx,2), %edi
	pfmul %mm5, %mm6
	pfnacc %mm7, %mm2
	movq 96(%eax), %mm7
	addl $120, %eax
	pswapd %mm3, %mm5
	pfmul %mm0, %mm3
	pfacc %mm6, %mm4
	movq (%ecx,%ebp), %mm6
	/* simd data load/store barrier */ 
	pfmul %mm0, %mm5
	leal (%edx,%edx,4), %ebp
	pswapd %mm6, %mm0
	pfmul %mm7, %mm6
	pfmul %mm7, %mm0
	movq %mm4, %mm7
	pfnacc %mm6, %mm3
	movq %mm2, %mm6
	pfacc %mm0, %mm5
	pfnacc %mm3, %mm4
	pfacc %mm3, %mm6
	pfnacc %mm5, %mm2
	pfacc %mm5, %mm7
	movq 48(%esp), %mm5
	movq %mm4, %mm3
	movq %mm6, %mm0
	pfacc 56(%esp), %mm6
	pfpnacc %mm2, %mm4
	pfpnacc %mm3, %mm2
	movq 40(%esp), %mm3
	pfnacc %mm7, %mm0
	pfacc %mm7, %mm1
	movq %mm5, %mm7
	movq %mm4, 104(%esp)
	movq %mm2, 96(%esp)
	movq 88(%esp), %mm4
	movq 80(%esp), %mm2
	pfadd %mm3, %mm7
	pfsub %mm3, %mm5
	movq %mm4, %mm3
	pfacc %mm2, %mm4
	pfnacc %mm3, %mm2
	movq %mm7, %mm3
	pfadd %mm4, %mm3
	pfsub %mm4, %mm7
	movq %mm6, %mm4
	pfacc %mm1, %mm6
	pfnacc %mm4, %mm1
	movq %mm3, %mm4
	pfsub %mm6, %mm4
	pfadd %mm6, %mm3
	movq %mm7, %mm6
	pfadd %mm1, %mm7
	pfsub %mm1, %mm6
	movq %mm5, %mm1
	movq %mm4, (%ecx,%edx,8)
	movq 24(%esp), %mm4
	pfsub %mm2, %mm5
	movq %mm3, (%ecx)
	movq %mm0, %mm3
	pfadd %mm2, %mm1
	movq %mm7, (%ecx,%edx,4)
	movq %mm6, (%ecx,%edi,4)
	movq 16(%esp), %mm6
	leal (%ebp,%edx,2), %edi
	pfpnacc %mm4, %mm3
	pswapd %mm4, %mm4
	pfpnacc %mm0, %mm4
	movq %mm1, %mm0
	movq %mm6, %mm2
	pfmul KP923879532KP382683432, %mm6
	movq %mm3, %mm7
	pfmul KP382683432KP923879532, %mm2
	pfacc %mm4, %mm3
	pfnacc %mm7, %mm4
	movq %mm5, %mm7
	pfmul KP707106781KP707106781, %mm3
	pfmul KP707106781KP707106781, %mm4
	pfsub %mm3, %mm0
	pfadd %mm4, %mm5
	pfadd %mm3, %mm1
	movq 0(%esp), %mm3
	pfsub %mm4, %mm7
	movq 32(%esp), %mm4
	movq %mm0, (%ecx,%ebp,2)
	movq 104(%esp), %mm0
	leal (%edx,%edx,2), %ebp
	movq %mm5, (%ecx,%ebp,2)
	movq %mm1, (%ecx,%edx,2)
	movq %mm3, %mm1
	pfsub %mm4, %mm3
	pswapd %mm0, %mm5
	pfmul KP382683432KP923879532, %mm0
	movq %mm7, (%ecx,%edi,2)
	movq 72(%esp), %mm7
	pfadd %mm4, %mm1
	movq 64(%esp), %mm4
	pfmul KP382683432KP923879532, %mm5
	leal (%edx,%ebp,4), %edi
	leal (%edx,%edx,4), %ebp
	pfpnacc %mm0, %mm2
	movq 8(%esp), %mm0
	pfpnacc %mm6, %mm5
	movq %mm7, %mm6
	pfacc %mm4, %mm7
	pfnacc %mm6, %mm4
	movq 96(%esp), %mm6
	pswapd %mm0, %mm0
	movq %mm2, 120(%esp)
	movq %mm5, 112(%esp)
	movq %mm0, %mm5
	pfmul KP382683432KP923879532, %mm0
	pfmul KP707106781KP707106781, %mm7
	pswapd %mm6, %mm2
	pfmul KP923879532KP382683432, %mm5
	pfmul KP923879532KP382683432, %mm6
	pfmul KP923879532KP382683432, %mm2
	pfmul KP707106781KP707106781, %mm4
	pfpnacc %mm0, %mm6
	movq %mm1, %mm0
	pfpnacc %mm2, %mm5
	pfsub %mm7, %mm1
	pfadd %mm7, %mm0
	movq %mm5, %mm2
	pfnacc %mm6, %mm5
	movq %mm1, %mm7
	pfacc %mm2, %mm6
	movq %mm0, %mm2
	pfsub %mm5, %mm1
	pfadd %mm5, %mm7
	movq %mm3, %mm5
	pfsub %mm6, %mm2
	pfadd %mm6, %mm0
	movq 120(%esp), %mm6
	movq %mm1, (%ecx,%edi)
	movq 112(%esp), %mm1
	pfsub %mm4, %mm3
	movq %mm7, (%ecx,%ebp)
	pfadd %mm4, %mm5
	leal (%edx,%edx,8), %edi
	leal (%edx,%edx,2), %ebp
	movq %mm6, %mm7
	movq %mm2, (%ecx,%edi)
	pfnacc %mm1, %mm6
	movq %mm3, %mm4
	leal (%ebp,%ebp,4), %edi
	pfacc %mm7, %mm1
	movq %mm5, %mm2
	movq %mm0, (%ecx,%edx)
	pfsub %mm6, %mm4
	pfadd %mm6, %mm3
	pfsub %mm1, %mm2
	pfadd %mm1, %mm5
	movq %mm4, (%ecx,%edi)
	leal (%ebp,%edx,4), %edi
	movq %mm3, (%ecx,%edi)
	leal (%edi,%edx,4), %ebp
	leal (%edx,%edx,2), %edi
	movq %mm2, (%ecx,%ebp)
	movq %mm5, (%ecx,%edi)
	addl %ebx, %ecx
	decl %esi
	jnz .L0
	femms 
	movl 144(%esp), %ebx
	movl 140(%esp), %esi
	movl 136(%esp), %edi
	movl 132(%esp), %ebp
	addl $148, %esp
	ret 

.section .rodata
nam:
	.string "t1k7i_16"
	.align 4
twinstr:
	.byte 4
	.byte 0
	.value 16
	.byte 3
	.byte 1
	.value 0
	.align 4
desc:
	.long 16
	.long nam
	.long twinstr
	.zero 4
	.double 87
	.double 42
	.double 0
	.double 0
	.long fftwf_kdft_ct_k7_pgenus
	.long 0
	.long 0
	.long 0

.text
	.align 4
.globl fftwf_codelet_t1k7i_16
fftwf_codelet_t1k7i_16:
	subl $12,%esp
	movl 16(%esp),%eax
	addl $-4,%esp
	pushl $desc
	pushl $t1k7i_16
	pushl %eax
	call fftwf_kdft_dit_register
	addl $16,%esp
	addl $12,%esp
	ret

